'use strict'

const data = require('./data.json')

function computeMachines(args) {
    const {inputAmount, recipeInputAmount, recipeOutputAmount, perFloor, powerShards} = args,
        floors = Math.ceil(inputAmount / (recipeInputAmount * perFloor * (1 + powerShards * 0.5))),
        machines = floors * perFloor,
        clock = inputAmount / (machines * recipeInputAmount),
        usedPowerShards = clock > 1 ? Math.ceil((clock - 1) * 2) : 0,
        outputAmount = recipeOutputAmount * machines * clock
    return {floors, machines, clock, outputAmount, perFloor, powerShards: usedPowerShards * machines}
}

// create comment string to display next to machine nodes
function renderMachines(machines, names) {
    const clock = Math.round(machines.clock * 10000) / 100
    let output = ''
    if (machines.perFloor > 1) {
        output = `${machines.floors} floors of ${machines.perFloor} ${names.machinesName} @ ${clock}%`
    } else {
        output = `${machines.machines} ${names.machinesName} @ ${clock}%`
    }
    if (machines.powerShards > 0) output += ` (using ${machines.powerShards} power shards)`
    output += `\nProducing ${machines.outputAmount} ${names.productName}/min`
    return output
}

// create string to display inputs
function renderInputs(inputs) {
    let result = []
    for (let slug in inputs) result.push(`${inputs[slug]} ${data.items[slug]}/min`)
    return result.join(' + ')
}
// create string to display recipe inputs
function renderRecipe(recipe) {
    let result = []
    for (let slug in recipe.ingredients) {
        let ingredient = recipe.ingredients[slug]
        result.push(`${ingredient.amount} ${ingredient.name}/min`)
    }
    return `Recipe: ${result.join(' + ')}`
}

// check that inputs are valid (Assemblers, Manufacturers, etc.)
function checkInputs(inputNodes, machines, recipe) {
    let inputs = {}, expectedInputs = {}
    for (let slug in recipe.ingredients) {
        expectedInputs[slug] = recipe.ingredients[slug].amount * machines.machines * machines.clock
    }
    for (let input of inputNodes) {
        if (input.value.slug) inputs[input.value.slug] = input.value.amount
    }
    const inputsString = renderInputs(inputs)
    for (let slug in expectedInputs) {
        if (inputs[slug] == expectedInputs[slug]) delete inputs[slug]
        else throw {
            error: "Invalid inputs or amount mismatch!",
            inputs: inputsString,
            expectedInputs: renderInputs(expectedInputs),
            recipe: renderRecipe(recipe)
        }
    }
}

module.exports = {data, computeMachines, renderMachines, checkInputs, renderRecipe}
